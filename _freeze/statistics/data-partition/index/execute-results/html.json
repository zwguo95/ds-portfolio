{
  "hash": "3c1e7db17344e08c6d8ef029c7edcc02",
  "result": {
    "markdown": "---\ntitle: \"Balanced Cluster Randomization: Strategies for Allocating Treatment and Control Groups\"\ndate: 12/6/2024\nauthor:\n  - name: Zhaowen Guo\n    url: \"https://www.linkedin.com/in/zhaowen-guo-20535312a/\"\ntitle-block-banner: true\nformat:\n  html:\n    theme: flatly\n    code-fold: false\n    code-tools: false\n    toc: false\n    number-sections: false\nlink-citations: true\ncategories: [code, statistics, experimental design]\nimage: \"partition.png\"\n---\n\n\nExperimental designs sometimes require randomization at the cluster level, where groups of individuals---rather than individuals themselves---are assigned to treatment or control. This approach is often necessary when the intervention naturally applies at the cluster level (e.g., policy changes targeting schools, hospitals, or workplaces) or when participants within a cluster lack independence (e.g., students within the same classroom or employees within the same company).\n\nWe encountered this exact challenge in designing a randomized controlled trial (RCT) with caseworkers. Earlier pilot studies revealed that caseworkers within the same agency often communicate during experiments, making it difficult to ensure compliance with their assigned treatment. To address this, we shifted from individual-level to agency-level randomization.\n\nHowever, this introduced a new challenge: the wide variation in agency caseworker counts makes random assignment prone to substantial imbalances. Since statistical power is typically maximized when treatment and control arms have similar sizes, the key question becomes: how can we allocate agencies to treatment and control groups to achieve balanced caseworker counts? In this blog post, I'll share my exploration of strategies---including alternate assignment, greedy algorithms, and the largest differencing method---for achieving balance in cluster randomization.\n\n# Alternate Assignment\n\nThe alternate assignment method is straightforward: agencies are first sorted by their caseworker counts, and then alternately assigned to treatment and control groups. This process ensures that both groups receive a mix of agencies with varying sizes and thus to prevent extreme imbalances.\n\nLet's consider six agencies with caseworker counts: $$\nS = \\{50,30,40,10,20,5\\}\n$$ The alternate assignment method would perform the following steps:\n\n-   Caseworker counts will be sorted in descending order: {50, 40, 30, 20, 10, 5}\n\n-   The sorted agencies will be alternately assigned to treatment and control groups\n\n    -   Treatment: {50, 30, 10}\n\n    -   Control: {40, 20, 5}\n\nThis method is easy to implement and generally ensures reasonably balanced groups. However, it struggles when the data contains clusters or extreme outliers. For example, with S = {45,44,43,5,4,3}, the clustering of similar values (e.g. 45,44,43) results in imbalances between the treatment and control groups. Similarly, in datasets with extreme outliers, a few very large values can dominate the totals in one group.\n\n# Greedy Algorithm\n\nThe greedy algorithm attempts to minimize the difference in caseworker counts between treatment and control groups by iteratively assigning each agency to the group with the smaller current total.\n\nUsing the same example: \n$$\nS = \\{50,30,40,10,20,5\\}\n$$\n\n-   Caseworker counts will first be sorted in descending order: {50, 40, 30, 20, 10, 5}\n\n-   Then we assign 50 to treatment\n\n    -   Treatment: {50}, Total: 50\n\n    -   Control: {}, Total: 0\n\n-   We assign 40 to control as it has a smaller total\n\n    -   Treatment: {50}, Total: 50\n\n    -   Control: {40}, Total: 40\n\n-   We assign 30 to control as it has a smaller total\n\n    -   Treatment: {50}, Total: 50\n\n    -   Control: {40, 30}, Total: 70\n\n-   Following similar steps, eventually we have\n\n    -   Treatment: {50, 20, 10}, Total: 80\n\n    -   Control: {40, 30, 5}, Total: 75\n\nCompared to alternate assignment, the greedy algorithm achieves better balance (absolute difference: 5 vs. 25). Its dynamic balancing prevents any group from dominating caseworker totals, effectively minimizing the impact of large agencies in datasets with high variance or outliers.\n\n# Largest Differencing Method\n\nThe largest differencing method (LDM) offers another option to balance groups by iteratively pairing and reducing discrepancies. It works by repeatedly taking the two largest remaining values, placing them in different groups, and replacing them with their difference.\n\nBelow is an example for illustration:\n\n$$\nS = \\{2,8,11,12,17,18\\}\n$$\n\n-   After sorting caseworker counts in descending order, we pair the two largest numbers and replace them with their difference\n\n    -   18-17=1, {12, 11, 8, 2, **1**}\n\n    -   12-11=1, {8, 2, 1, **1**}\n\n    -   8-2=6, {6, 1, **1**}\n\n    -   6-1=5, {**5**, 1}\n\n    -   5-1=4, {**4**}\n\n-   We then reconstruct the treatment and control groups by backtracking through the differencing steps. Specifically, we remove the difference from the subset, with larger number *replacing* the difference in the same set and the smaller one *adding* to another set\n\n    -   From 5-1=4\n\n        -   Treatment: {**5**}\n\n        -   Control: {**1**}\n\n    -   From 6-1=5\n\n        -   Treatment: {**6**}\n\n        -   Control: {**1**, 1}\n\n    -   From 8-2=6\n\n        -   Treatment: {**8**}\n\n        -   Control: {**2**, 1, 1}\n\n    -   From 12-11=1\n\n        -   Treatment: {**11**, 8}\n\n        -   Control: {**12**, 2, 1}\n\n    -   From 18-17=1\n\n        -   Treatment: {**17**, 11, 8}\n\n        -   Control: {**18**, 12, 2}\n\nThe LDM approach ensures that the largest contributors to imbalance are addressed first, effectively distributing dominant values across the treatment and control groups.\n\n# Comparison \n\nTo systematically evaluate methods for achieving balance, I conducted a simulation analysis using different synthetic datasets. For each simulation, a random subset of a given number of agencies (clusters) was selected among 50 agencies, and these agencies were assigned to treatment and control groups to minimize the difference in caseworker totals between the groups. This process was repeated 500 times for each subset size.\n\nSpecifically, I considered three types of data structures: (1) **clustered data**, where caseworker counts are concentrated in two distinct clusters of high and low values; (2) **dispersed data**, where caseworker counts are evenly spread across a wide range; and (3) **skewed data**, where a few agencies have very large caseworker counts while most have smaller counts. The distributions of these datasets are displayed below.\n\n![](data_generation.png)\n\nThe graphs below summarize the simulation results. As expected, random assignment without accounting for the variation in caseworker counts among agencies results in highly imbalanced samples, producing the largest mean absolute differences between groups. Among the three data types, the **Greedy Algorithm** consistently performs the best to create groups where caseworker counts are relatively similar. For **dispersed** and **clustered** data, both the Greedy Algorithm and LDM perform comparably well. However, for **skewed data**, LDM performs much worse than Greedy, suggesting its limitations in handling datasets with extreme outliers.\n\n![](clustered_data.png)\n\n![](dispersed_data.png)\n\n![](skewed_data.png)\n\n\nBelow is the R code implementation of these treatment assignment approaches.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Baseline: Random Assignment\nrandom_assignment <- function(data) {\n  shuffled_data <- data[sample(nrow(data)), ]  \n  half <- nrow(shuffled_data) %/% 2\n  treatment <- shuffled_data[1:half, ]\n  control <- shuffled_data[(half + 1):nrow(shuffled_data), ]\n  return(list(Treatment = treatment, Control = control))\n}\n\n# Alternate Assignment\nalternate_assignment <- function(data) {\n  sorted_data <- data[order(-data$Case_Workers), ] \n  treatment <- sorted_data[seq(1, nrow(sorted_data), 2), ]\n  control <- sorted_data[seq(2, nrow(sorted_data), 2), ]\n  return(list(Treatment = treatment, Control = control))\n}\n\n# Greedy Algorithm\ngreedy_assignment <- function(data) {\n  sorted_data <- data[order(-data$Case_Workers), ]\n  treatment <- data.frame()\n  control <- data.frame()\n  treatment_sum <- 0\n  control_sum <- 0\n  \n  for (i in 1:nrow(sorted_data)) {\n    if (treatment_sum <= control_sum) {\n      treatment <- rbind(treatment, sorted_data[i, ])\n      treatment_sum <- treatment_sum + sorted_data$Case_Workers[i]\n    } else {\n      control <- rbind(control, sorted_data[i, ])\n      control_sum <- control_sum + sorted_data$Case_Workers[i]\n    }\n  }\n  return(list(Treatment = treatment, Control = control))\n}\n\n# Largest Differencing Method with Backtracking\nlargest_differencing_partition <- function(data) {\n  S <- sort(data$Case_Workers, decreasing = TRUE)\n  steps <- list() \n  \n  while (length(S) > 1) {\n    largest <- S[1]\n    second_largest <- S[2]\n    steps <- c(steps, list(c(largest, second_largest))) \n    S <- c(S[-c(1, 2)], abs(largest - second_largest))\n    S <- sort(S, decreasing = TRUE)\n  }\n  \n  subset1 <- c()\n  subset2 <- c()\n  \n  for (step in rev(steps)) {\n    if (sum(subset1) <= sum(subset2)) {\n      subset1 <- c(subset1, step[1])\n      subset2 <- c(subset2, step[2])\n    } else {\n      subset1 <- c(subset1, step[2])\n      subset2 <- c(subset2, step[1])\n    }\n  }\n  \n  treatment_df <- data[data$Case_Workers %in% subset1, ]\n  control_df <- data[data$Case_Workers %in% subset2, ]\n  \n  return(list(Treatment = treatment_df, Control = control_df))\n}\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}