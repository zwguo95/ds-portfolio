---
title: "Visualizing Data with R"
editor: visual
author: "Zhaowen Guo"
format:
  revealjs:
    smaller: true
    scrollable: true
    self-contained: true
    slide-number: true
    footer: "CSSCR Workshop"
    reference-location: "document"
    link-external-icon: true
    link-external-newwindow: true
    footnotes-hover: true
    auto-animation: true
execute: 
  echo: true
  message: false
  warning: false
---

## Agenda

-   ggplot2 and elements of information visualization

-   Visualizing tabular data

    -   Information from one variable
    -   Information from multiple variables

## Graphic systems in R

::: incremental
-   Imperative programming
    -   Step-by-step instructions to control the exact construction of output
    -   Hands on and more work
    -   base, grid, tile
-   Declarative programming
    -   Allow software to apply a standard solution
    -   Customize with a stylesheet
    -   ggplot2
:::

## What is ggplot2

::: incremental
-   Graphics link data to dimensions of specific aesthetic objects, which are distinguishable by their geometric structure and modifiable in scale and style
-   Users supply the data and request a geometry, leaving others to the software
-   Layered grammar of graphics
    -   Layers: components of a graph connected by +
    -   Aesthetics: specified inside layers about how layers appear
:::

## Elements of information visualization

Objects

::: incremental
-   Known as $geoms$ in ggplot2 which specifies how the data are presented on the plot
-   **Points** or **texts** can represent location: geom_point(), geom_text(), geom_label()
-   **Lines** can represent numerical values and relationships: geom_line(), geom_smooth()
-   **Polygons** can represent area or size: geom_rect(), geom_bar()
:::

## Elements of information visualization

Aesthetics

::: incremental
-   Colors: use default colors or brewer palettes [ColorBrewer](https://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3), [R palettes](https://r-graph-gallery.com/38-rcolorbrewers-palettes.html) and specify **fill** or **color** argument

-   Line types: specify the **linetype** argument by an integer or a character (see [reference](http://www.sthda.com/english/wiki/line-types-in-r-lty) here)

-   Dot types: specify the **shape** argument by an integer or a character (see [reference](http://www.sthda.com/english/wiki/ggplot2-point-shapes) here)

-   Stacked bar plots or histograms: specify the **fill** argument
:::

## Elements of information visualization

Components

-   Title
-   Legend
-   Annotations
-   Labels
-   Background

## Steps to create a ggplot2 graphic

::: incremental
-   Establish a mapping between data variables and plotting dimensions or elements
-   Apply the mapping to one or more standardized aesthetic elements
-   Draw the resulting set of graphical objects
:::

## An illustration

How did GDP per capita change over time in Oceanian countries?

```{r}
options(scipen = 999) # prevent scientific notation like e
library(gapminder) # load gapminder dataset from gapminder package
library(ggplot2) # load ggplot2 package for visualization
library(tidyverse) # load tidyverse package for data wrangling
str(gapminder) # examine gapminder dataset
```

```{r}
oceania <- gapminder %>%
  filter(continent == "Oceania")
```

## An illustration

``` {.r code-line-numbers="1|2-5|6|7|8|9|1-9"}
ggplot(oceania, # input the data
  aes(x = year, 
      y = gdpPercap, 
      color = country,
      linetype = country)) + # establish aesthetic mappings
  geom_line(size = 1) + # apply mapping to geom objects
  ggtitle("Life expectancy in Oceanian countries over time") + # add title
  labs(x = "Year", y = "GDP per capita") + # add labels
  theme_bw() # change background to white background with grey gridlines
```

## An illustration {.smaller .scrollable transition="slide"}

::: panel-tabset
#### Plot

```{r}
ggplot(oceania, # input the data
  aes(x = year, 
      y = gdpPercap, 
      color = country,
      linetype = country)) + # establish aesthetic mappings
  geom_line(size = 1) + # apply mapping to geom objects
  ggtitle("Life expectancy in Oceanian countries over time") + # add title
  labs(x = "Year", y = "GDP per capita") + # add labels
  theme_bw() # change background to white background with grey gridlines
```

#### Data

```{r}
knitr::kable(oceania)
```
:::

## Information from one variable

::: panel-tabset
#### Histograms

```{r}
# show frequencies of a variable
gapminder %>%
  filter(year == 1952) %>%
  ggplot(aes(x = lifeExp)) + 
  geom_histogram(binwidth = 2) +
  theme_light() +
  labs(x = "Life Expectancy", y = "Count", title = "Life Expectancy in 1952")
```

#### Density plots

```{r}
# show frequencies of a variable
gapminder %>%
  filter(year == 1952) %>%
  ggplot(aes(x = lifeExp)) + 
  geom_density(size = 1.5, alpha = 0.2, fill = "red") +
  theme_light() +
  labs(x = "Life Expectancy", y = "Count", title = "Life Expectancy in 1952")
```

#### Boxplots

```{r}
# show distribution of a variable (median, 1st, 3rd quantiles, outliers)
gapminder %>% filter(year == 1952, continent=="Europe") %>%
  ggplot(aes(y = lifeExp)) + 
  geom_boxplot(fill = "grey", color = "blue", outlier.shape = 1) + # adjust aesthetics
  theme_light() +
  labs(title = "Life Expectancy in 1952 (Europe)", 
       y = "Life Expectancy", 
       x = "") 
```

#### Barplots

```{r}
# show distribution of a discrete variable 
ggplot(gapminder, 
       aes(x = continent,
           fill = continent)) + # differentiate the filled colors
  geom_bar() + 
  theme_classic() + 
  labs(y = "Number of countries", x = "Continent")
```

#### Lollipop charts

```{r}
americas <- gapminder %>% 
  filter(year == 2007 & continent == "Americas") %>% 
  arrange(gdpPercap) %>% 
  mutate(country = factor(country, levels = country))

ggplot(americas, aes(x = gdpPercap, y = country)) +
  geom_segment(aes(x = 0, xend = gdpPercap, 
                   y = country, yend = country), # which is why we need to make country a factor
               color = "black") + 
  geom_point(colour = "blue", size = 2, alpha = 0.8) +
  scale_x_continuous(expand = c(0, 0), 
                     limits = c(0, max(americas$gdpPercap) * 1.1),
                     labels = scales::dollar) + 
  theme_bw()
```
:::

## Information from multiple variables

::: panel-tabset
#### Multiples

```{r}
gapminder %>%
  ggplot(aes(x = lifeExp)) + 
  geom_histogram() + 
  facet_wrap(~ continent, ncol = 3) +
  labs(title = "Life expectancy distribution by continent") +
  theme_minimal()
```

#### Layered density plots

```{r}
gapminder %>%
  filter(year == 2007 & continent != "Oceania") %>%
  ggplot(aes(x = lifeExp)) + 
  geom_density(aes(fill = continent), size = 0.1, alpha = 0.5) + 
  scale_fill_brewer(palette = "Set1") +
  labs(title = "Life expectancy distribution in 2007") +
  theme_minimal()
```

#### Grouped barplots

```{r}
gapminder %>% 
  filter(year > 1990) %>%
  group_by(year, continent) %>%
  summarise(totalpop = sum(as.double(pop))) %>%
  ggplot(aes(x = year, y = totalpop, fill = continent)) + 
  geom_col(position = "dodge", size = 0.2, alpha = 0.8) + # dodge overlapping objects side by side 
  scale_x_continuous(breaks = seq(1992, 2007, 5), expand = c(0, 0)) +
  scale_y_continuous(labels = scales::comma, expand = c(0, 0)) +
  scale_fill_brewer(palette = "Set1") +
  theme_bw()
```
:::

## Practices

Exercise 1: Make a scatter plot with average GDP per capita across all countries on the y-axis and year on the x-axis.

Exercise 2: Break down the plot from exercise 1 by continent, using colors to distinguish the points and transforming mean GDP per capita on the log scale.

Exercise 3: Make a collection of bar plots faceted by year that compare mean GDP per capita across countries in a given year. Orient the plots to make it easier to read the continent labels.

Exercise 4: What is the relationship between life expectancy and GDP per capita in 2007 by non-Oceanian continents?

## Solutions

::: panel-tabset
#### Solution 1

```{r}
gapminder %>%
  group_by(year) %>%
  summarize(meanGDPpc = mean(gdpPercap)) %>%
  ggplot(aes(x = year, y = meanGDPpc)) +
  geom_point()
```

#### Solution 2

```{r}
gapminder %>%
  group_by(year, continent) %>% # aggregate the information by year by continent
  summarize(meanGDPpc = mean(gdpPercap)) %>%
  ggplot(aes(x = year, y = meanGDPpc, color = continent)) +
  geom_point() +
  scale_y_log10() # apply the log scale to GDP per capita
```

#### Solution 3

```{r}
gapminder %>%
  group_by(year, continent) %>%
  summarize(meanGDPpc = mean(gdpPercap)) %>%
  ggplot(aes(x = continent, y = meanGDPpc)) +
  geom_col() +
  facet_wrap(~ year) +
  coord_flip() # flip the coordinates so that the continent names are visible
```

#### Solution 4

```{r}
gapminder %>%
  filter(year == 2007 & continent != "Oceania") %>% 
  ggplot(aes(x = log(gdpPercap),
             y = lifeExp,
             color = continent)) +
  geom_point(alpha = 0.5) +
  geom_smooth(method = "lm") + 
  facet_wrap(~ continent)
```
:::

## Bonus: animations!

Check out [plotly package](https://plotly-r.com/)

```{r}
library(plotly)
animate_gapminder <- ggplot(gapminder, aes(gdpPercap, lifeExp, color = continent)) +
  geom_point(aes(size = pop, ids = country, frame = year)) +
  geom_smooth(se = FALSE, method = "lm") +
  scale_x_log10() + 
  theme_bw() + 
  labs(x = "GDP per capita", y = "Life expectancy") +
  theme(legend.position = "none") # remove legend

ggplotly(animate_gapminder) %>% 
  highlight("plotly_hover") %>%
  animation_slider(
    currentvalue = list(prefix = "Year ", font = list(color="black"))
  )
```
